# -*- coding: utf-8 -*-
"""SUR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wnDkZGbolCGw1ziFaDtbIzQ7xpZss7Af
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy
import glob

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

"""File directories structure
```
.
|── eval
|   ├── non_target_dev
|   └── target_dev
|── dev
|   ├── non_target_dev
|   └── target_dev
└── train
    ├── non_target_train
    └── target_train
```
"""

data_transforms = {
    'train': transforms.Compose([
        transforms.Resize(250),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'dev': transforms.Compose([
        transforms.Resize(250),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'eval': transforms.Compose([
        transforms.Resize(250),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
}


# cause we need with output 
class ImageFolderWithPaths(datasets.ImageFolder):
    """Custom dataset that includes image file paths. Extends
    torchvision.datasets.ImageFolder
    """

    # override the __getitem__ method. this is the method that dataloader calls
    def __getitem__(self, index):
        # this is what ImageFolder normally returns 
        original_tuple = super(ImageFolderWithPaths, self).__getitem__(index)
        # the image file path
        path = self.imgs[index][0]
        # make a new tuple that includes original and the path
        tuple_with_path = (original_tuple + (path,))
        return tuple_with_path

data_dir = '/content/drive/My Drive/pictures_only/pictures_only'
# data_dir = '/content/drive/My Drive/pictures_only/data_augmentated'

image_datasets = {x: ImageFolderWithPaths(os.path.join(data_dir, x),
                                          data_transforms[x])
                  for x in ['train', 'dev', 'eval']}
dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,
                                             shuffle=True, num_workers=4)
              for x in ['train', 'dev', 'eval']}
dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'dev']}
class_names = image_datasets['train'].classes

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
    since = time.time()

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['train', 'dev']:
            if phase == 'train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels, _ in dataloaders[phase]:
                inputs = inputs.to(device)
                labels = labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)
            if phase == 'train':
                scheduler.step()

            epoch_loss = running_loss / dataset_sizes[phase]
            epoch_acc = running_corrects.double() / dataset_sizes[phase]

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'dev' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(
        time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model

model_conv = torchvision.models.resnet50(pretrained=True)
for param in model_conv.parameters():
    param.requires_grad = False

# Parameters of newly constructed modules have requires_grad=True by default
num_ftrs = model_conv.fc.in_features
model_conv.fc = nn.Linear(num_ftrs, 2)

model_conv = model_conv.to(device)

criterion = nn.CrossEntropyLoss()

# Observe that only parameters of final layer are being optimized as
# opposed to before.
optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)

model_conv = train_model(model_conv, criterion, optimizer_conv,
                         exp_lr_scheduler, num_epochs=10)

def visualize_model(model):
    was_training = model.training
    model.eval()
    images_so_far = 0
    sample_index = 0
    result = []

    with torch.no_grad():
        # go through all evaluation data
        for i, (inputs, labels, samples_fname) in enumerate(dataloaders['eval']):
            inputs = inputs.to(device)
            labels = labels.to(device)

            outputs = model(inputs)
            _, preds = torch.max(outputs, 1)
            
            # count probabilities
            is_target = preds.cpu().tolist()

            probabilities = nn.functional.softmax(outputs)
            probabilities = [max(x).tolist() if is_target[i] == 1 else min(x).tolist() for i, x in enumerate(probabilities)]
            
            # cut path and extension from file names 
            samples_fname = tuple([os.path.splitext(os.path.basename(x))[0] for x in samples_fname])
            
            # create format for the output file
            to_print = [" ".join(x) for x in zip(samples_fname,  map(str, probabilities), map(str, is_target))]
            result.extend(to_print)

            images_so_far += (inputs.size()[0])
            
        model.train(mode=was_training)
    return result
results = visualize_model(model_conv)

# Summary and statistics
all_marked_as_target = sum(x[-1] == str(1) for x in results)
marked_as_non_target = len(results) - all_marked_as_target

target_file_names = [f for f in glob.glob(os.path.join(data_dir, 'eval/target/*'))]
target_file_names = [os.path.splitext(os.path.basename(x))[0] for x in target_file_names]

properly_marked_as_target = sum(x.split()[0] in target_file_names for x in results)

should_be_target = list(set(target_file_names) - set([x.split()[0] for x in results if x[-1] == str(1)]))
print("should be target: ", should_be_target)
should_be_nontarget = list(set([x.split()[0] for x in results if x[-1] == str(1)]) - set(target_file_names))
print("should be nontarget: ", should_be_nontarget)

print("all inputs: {}, target: {}, nontargeted: {}".format(len(results),all_marked_as_target,marked_as_non_target))
print('MISSTARGETED: should_be_target: {}, should_be_nontarget: {}, together: {}'.format(
    len(should_be_target),len(should_be_nontarget),len(should_be_target)+len(should_be_nontarget)))
print('percentage: {}%'.format((len(results)-len(should_be_target)-len(should_be_nontarget))/len(results)*100))



# print result to file
with open('/content/drive/My Drive/pictures_only/pictures_resnet50_finetuned_result.txt', 'w') as f:
  print(*results,sep='\n', file=f)
f.close()

#print summary to file 
with open('/content/drive/My Drive/pictures_only/pictures_resnet50_finetuned_summary', 'w') as fs:
  print("all inputs: {}, target: {}, nontargeted: {}".format(len(results),all_marked_as_target,marked_as_non_target),file=fs)
  print('MISSTARGETED: should_be_target: {}, should_be_nontarget: {}, together: {}'.format(
    len(should_be_target),len(should_be_nontarget),len(should_be_target)+len(should_be_nontarget)),file=fs)
  print('percentage: {}%'.format((len(results)-len(should_be_target)-len(should_be_nontarget))/len(results)*100),file=fs)
  print("should be target: ", should_be_target,file=fs)
  print("should be nontarget: ", should_be_nontarget,file=fs)
fs.close()

drive.flush_and_unmount()