# GAL plots source file

import numpy as np
import matplotlib.pyplot as plt

if __name__ == "__main__":
    # Graph 1 -- Sequential vs. Parallel with 1 thread performance
    """
    x = np.linspace(1, 200, 200)
    seq = np.array([0.001, 0.001, 0.002, 0.003, 0.004, 0.005, 0.008, 0.01, 0.014, 0.017, 0.02, 0.043, 0.0535, 0.038, 0.078, 0.053, 0.062, 0.071, 0.082, 0.095, 0.1735, 0.1225, 0.138, 0.155, 0.18, 0.194, 0.216, 0.238, 0.2675, 0.289, 0.322, 0.338, 0.368, 0.42, 0.456, 0.493, 0.532, 0.573, 0.613, 0.6585000000000001, 0.705, 0.755, 0.807, 0.833, 0.89, 0.947, 1.006, 1.0675, 1.134, 1.2, 1.2685, 1.343, 1.4184999999999999, 1.5034999999999998, 1.577, 1.657, 1.7445, 1.848, 1.943, 2.077, 2.1695, 2.2255000000000003, 2.332, 2.441, 2.548, 2.6630000000000003, 2.7835, 2.8994999999999997, 3.0335, 3.1559999999999997, 3.2874999999999996, 3.423, 3.5715000000000003, 3.7095000000000002, 3.8585000000000003, 4.021, 4.1675, 4.3535, 4.482, 4.6685, 4.836, 5.0095, 5.1754999999999995, 5.364000000000001, 5.5600000000000005, 5.746, 5.9335, 6.221, 6.34, 6.5525, 6.8535, 7.0225, 7.208, 7.4455, 7.67, 7.909, 8.151, 8.379, 8.6355, 8.910499999999999, 9.183, 9.4685, 9.711500000000001, 10.037500000000001, 10.2965, 10.586, 10.8965, 11.2955, 11.475999999999999, 11.789, 12.1195, 12.419, 12.765, 13.043, 13.458, 13.7925, 14.131499999999999, 14.508, 15.011, 15.2775, 15.6225, 16.006, 16.441, 16.802999999999997, 17.368000000000002, 17.626, 18.064500000000002, 18.4025, 18.8345, 19.3305, 19.753999999999998, 20.1865, 20.692999999999998, 21.0605, 21.586, 22.2175, 22.4815, 23.192500000000003, 23.5235, 24.059, 24.4955, 25.063000000000002, 25.5375, 26.1665, 26.725, 27.191499999999998, 27.6935, 28.304000000000002, 28.9495, 29.4485, 30.0475, 30.7905, 31.256, 32.1155, 32.512, 33.183499999999995, 33.733000000000004, 34.307, 34.992999999999995, 35.57, 36.281, 36.964, 37.6435, 38.795500000000004, 43.829, 44.3965, 40.424, 41.261, 41.869, 42.54, 43.591499999999996, 44.667, 44.9975, 45.914500000000004, 46.5655, 47.342, 48.091499999999996, 48.771, 49.699, 50.795500000000004, 51.417, 52.4075, 53.204499999999996, 53.9845, 55.297, 55.8785, 56.8765, 57.513000000000005, 58.705, 59.4645, 60.472, 61.3575, 62.4465, 71.292, 64.749, 65.4115, 66.262, 68.3485, 68.6265, 69.26599999999999])
    parSeq = np.array([0.0215, 0.022, 0.0295, 0.0365, 0.0465, 0.038, 0.054, 0.08, 0.0565, 0.08299999999999999, 0.0765, 0.066, 0.0965, 0.0735, 0.1065, 0.1065, 0.095, 0.128, 0.109, 0.155, 0.161, 0.1645, 0.18, 0.183, 0.2085, 0.235, 0.2525, 0.2415, 0.254, 0.297, 0.3015, 0.3525, 0.3155, 0.356, 0.428, 0.393, 0.429, 0.4725, 0.5115000000000001, 0.5005, 0.5745, 0.605, 0.604, 0.6025, 0.6395, 0.694, 0.6995, 0.7455, 0.7845, 0.8245, 0.8674999999999999, 0.9025000000000001, 0.9744999999999999, 1.0125, 1.049, 1.1255, 1.171, 1.2715, 1.214, 1.2875, 1.318, 1.479, 1.507, 1.5099999999999998, 1.5379999999999998, 1.7585, 1.831, 1.8815, 1.9369999999999998, 2.06, 2.167, 2.0515, 2.3064999999999998, 2.4135, 2.3765, 2.59, 2.716, 2.8205, 2.8865, 2.9800000000000004, 2.916, 3.202, 3.365, 3.4690000000000003, 3.577, 3.6005000000000003, 3.8465, 4.1475, 4.067, 4.2509999999999994, 4.355499999999999, 4.4945, 4.6419999999999995, 4.776, 4.874, 5.1135, 5.2425, 5.419499999999999, 5.524, 5.692, 5.8955, 6.0915, 6.2415, 6.386, 6.596, 6.818, 6.9915, 7.238, 7.406499999999999, 7.568, 7.767, 7.9805, 8.1965, 8.316, 8.6345, 8.844999999999999, 9.0805, 9.286, 9.505500000000001, 9.761, 10.0275, 10.2505, 10.501999999999999, 10.811, 11.2135, 11.302, 11.556000000000001, 11.715, 11.899000000000001, 12.267, 12.309000000000001, 12.8345, 12.9895, 13.0125, 13.642, 14.066, 14.3675, 14.6355, 14.832, 15.2125, 15.602, 15.828, 15.5075, 16.2155, 16.863, 17.130499999999998, 17.482999999999997, 17.7685, 18.2825, 18.559, 18.948, 18.532, 19.6785, 20.177999999999997, 20.594, 20.973, 21.253, 21.756, 22.066499999999998, 22.6755, 23.1205, 23.5955, 23.83, 24.293, 24.685000000000002, 25.192999999999998, 25.593, 26.1875, 26.6515, 27.158, 27.606, 27.9195, 28.633, 28.932, 29.536, 30.0775, 30.4745, 31.116, 31.6385, 32.075500000000005, 32.77, 33.213499999999996, 33.668, 34.157, 34.680499999999995, 35.2945, 35.536, 36.199, 33.3935, 37.576, 37.99, 38.4695, 39.2005, 40.0305, 40.4195, 37.8835, 41.869, 42.5245, 42.8655, 43.8225])

    _ = plt.xlabel('Graph size (nodes)')
    _ = plt.ylabel('Time (ms)')
    _ = plt.title('Radio Coloring Implementations Comparison')
    _ = plt.plot(x, seq, label="Sequential")
    _ = plt.plot(x, parSeq, label="Parallel (1 thread)")
    _ = plt.legend()
    plt.show()
    """

    # Pure parallel vs. Parallel optimized comparison
    """
    x = np.linspace(1, 200, 200)
    purePar = np.array([1.0305, 0.89, 1.0755, 1.271, 1.5825, 1.5030000000000001, 1.9540000000000002, 2.0860000000000003, 1.8730000000000002, 2.4715, 2.5535, 2.683, 2.8285, 2.6675, 2.9524999999999997, 3.1745, 3.14, 3.645, 3.3515, 3.877, 4.253, 4.374, 4.3225, 4.1315, 4.5024999999999995, 4.6135, 4.85, 4.679, 4.6885, 5.356999999999999, 5.245, 5.208, 5.1835, 5.2524999999999995, 5.5015, 5.510999999999999, 5.5485, 6.059, 5.936999999999999, 5.97, 6.1425, 6.264, 6.489, 6.3454999999999995, 6.5005, 6.702, 6.778499999999999, 6.9045000000000005, 7.0634999999999994, 7.213, 7.481, 7.265, 7.513, 7.8125, 7.6615, 8.0855, 8.1965, 8.1735, 8.5045, 7.948499999999999, 8.041, 8.841999999999999, 9.074, 8.747, 8.292, 9.4565, 9.467500000000001, 9.359, 9.501000000000001, 10.0415, 10.131499999999999, 9.4555, 9.953, 10.594000000000001, 10.3695, 10.812, 11.006, 10.932500000000001, 11.304, 11.223, 10.709, 11.756, 12.0245, 12.124500000000001, 11.940999999999999, 12.128499999999999, 12.4205, 12.442, 12.5885, 12.964, 13.065999999999999, 13.1745, 13.618, 13.3895, 13.4485, 13.952, 14.0885, 14.029, 13.6145, 14.309000000000001, 14.615, 14.935500000000001, 15.021, 14.6985, 15.375, 15.433, 15.1955, 15.823, 15.8275, 16.217, 16.9075, 16.435499999999998, 16.553, 16.3765, 17.023000000000003, 17.235999999999997, 17.134500000000003, 17.6485, 17.613500000000002, 17.886, 18.3585, 18.2055, 19.0485, 18.6695, 19.1725, 19.0395, 18.9575, 18.816499999999998, 19.2875, 19.484, 19.073, 19.963, 18.9865, 19.343, 19.8945, 20.462000000000003, 20.2325, 20.689, 20.7205, 20.576999999999998, 21.1435, 21.0245, 21.162, 21.122999999999998, 21.846, 21.8365, 22.0475, 22.494, 22.628, 22.664499999999997, 22.4155, 22.926000000000002, 23.6185, 23.657, 23.2385, 24.33, 23.5825, 24.433, 24.1145, 24.503999999999998, 25.189999999999998, 25.237000000000002, 25.244999999999997, 25.497500000000002, 26.0365, 26.555500000000002, 26.374000000000002, 26.427999999999997, 27.1055, 27.0105, 27.58, 27.3215, 28.1465, 27.7695, 28.182499999999997, 28.549, 28.786, 29.167499999999997, 29.561, 29.2665, 29.536, 29.365000000000002, 29.3565, 29.4805, 29.2035, 29.423000000000002, 29.616999999999997, 29.7865, 29.086, 30.4725, 30.0205, 30.416, 30.8965, 30.988, 32.2445, 31.060499999999998, 32.232, 32.456999999999994, 32.192499999999995, 32.893])
    parOpt = np.array([0.4905, 0.489, 0.498, 0.494, 0.497, 0.51, 0.5355000000000001, 0.522, 0.672, 0.698, 0.6984999999999999, 0.6995, 0.7044999999999999, 0.666, 0.6795, 0.671, 0.7595000000000001, 0.8135, 0.8135, 0.7215, 0.7925, 0.75, 0.8, 0.76, 0.8015000000000001, 0.82, 0.7735000000000001, 0.893, 0.819, 0.8005, 0.8714999999999999, 0.7695000000000001, 3.099, 3.13, 3.3775, 3.2595, 3.4785000000000004, 3.5145, 3.636, 3.526, 3.659, 3.6985, 3.7835, 3.8125, 3.735, 3.908, 3.7835, 4.0675, 4.1899999999999995, 4.15, 4.2715, 4.149, 4.175, 4.338, 4.401999999999999, 4.423, 4.583500000000001, 4.747, 4.882, 4.8885, 4.95, 4.9815000000000005, 4.909, 5.129, 9.193000000000001, 9.3355, 9.347999999999999, 9.584, 9.8925, 9.803, 9.844999999999999, 10.3035, 10.254999999999999, 10.592, 10.650500000000001, 11.0595, 10.92, 10.963000000000001, 11.286, 11.543, 11.485, 11.461500000000001, 11.852, 11.951, 12.1755, 13.247, 12.468499999999999, 12.85, 12.7395, 13.364, 13.371500000000001, 13.3935, 13.71, 13.8825, 14.05, 14.047, 13.46, 12.7665, 12.864, 13.0345, 13.3945, 13.399000000000001, 13.651, 15.288499999999999, 15.5125, 15.5085, 13.9815, 14.353000000000002, 15.781, 15.508500000000002, 15.5795, 14.7105, 14.991, 15.475999999999999, 15.2015, 15.315000000000001, 15.6845, 15.595500000000001, 15.936499999999999, 15.9335, 16.366999999999997, 16.333, 16.4525, 16.719, 16.930500000000002, 16.8305, 17.0235, 17.156, 17.396, 17.3145, 17.545, 17.7705, 17.9345, 17.94, 18.312, 18.412, 18.497, 19.295499999999997, 19.0595, 20.723, 20.1295, 19.5205, 20.083, 20.0715, 20.116, 20.2215, 20.354, 20.406, 20.637, 20.7395, 21.5555, 21.437, 21.28, 21.766, 21.132, 24.7865, 28.163, 26.1405, 27.3235, 27.6295, 27.274, 26.89, 28.593, 27.522, 27.726, 26.6235, 28.491500000000002, 29.346, 27.7775, 29.393, 29.5465, 28.144, 29.97, 30.946, 30.572499999999998, 30.464, 29.541, 31.807000000000002, 29.7365, 28.1555, 30.8915, 36.4435, 34.783, 31.433500000000002, 29.322499999999998, 30.704, 29.319499999999998, 29.7045, 29.484499999999997, 30.5345, 33.364000000000004, 34.198, 33.6785, 30.954, 31.9985, 32.2975, 32.21, 32.971000000000004, 32.7565, 33.245999999999995])


    _ = plt.xlabel('Graph size (nodes)')
    _ = plt.ylabel('Time (ms)')
    _ = plt.title('Parallel And Paralellel Optimized Comparison (16 threads)')
    _ = plt.plot(x, purePar, label="Pure Parallel")
    _ = plt.plot(x, parOpt, label="Parallel Optimized")
    _ = plt.legend()
    plt.show()
    """

    # Parallel optimized vs. sequential comparison
    """
    x = np.linspace(1, 200, 200)
    parSeq = np.array([0.0215, 0.022, 0.0295, 0.0365, 0.0465, 0.038, 0.054, 0.08, 0.0565, 0.08299999999999999, 0.0765, 0.066, 0.0965, 0.0735, 0.1065, 0.1065, 0.095, 0.128, 0.109, 0.155, 0.161, 0.1645, 0.18, 0.183, 0.2085, 0.235, 0.2525, 0.2415, 0.254, 0.297, 0.3015, 0.3525, 0.3155, 0.356, 0.428, 0.393, 0.429, 0.4725, 0.5115000000000001, 0.5005, 0.5745, 0.605, 0.604, 0.6025, 0.6395, 0.694, 0.6995, 0.7455, 0.7845, 0.8245, 0.8674999999999999, 0.9025000000000001, 0.9744999999999999, 1.0125, 1.049, 1.1255, 1.171, 1.2715, 1.214, 1.2875, 1.318, 1.479, 1.507, 1.5099999999999998, 1.5379999999999998, 1.7585, 1.831, 1.8815, 1.9369999999999998, 2.06, 2.167, 2.0515, 2.3064999999999998, 2.4135, 2.3765, 2.59, 2.716, 2.8205, 2.8865, 2.9800000000000004, 2.916, 3.202, 3.365, 3.4690000000000003, 3.577, 3.6005000000000003, 3.8465, 4.1475, 4.067, 4.2509999999999994, 4.355499999999999, 4.4945, 4.6419999999999995, 4.776, 4.874, 5.1135, 5.2425, 5.419499999999999, 5.524, 5.692, 5.8955, 6.0915, 6.2415, 6.386, 6.596, 6.818, 6.9915, 7.238, 7.406499999999999, 7.568, 7.767, 7.9805, 8.1965, 8.316, 8.6345, 8.844999999999999, 9.0805, 9.286, 9.505500000000001, 9.761, 10.0275, 10.2505, 10.501999999999999, 10.811, 11.2135, 11.302, 11.556000000000001, 11.715, 11.899000000000001, 12.267, 12.309000000000001, 12.8345, 12.9895, 13.0125, 13.642, 14.066, 14.3675, 14.6355, 14.832, 15.2125, 15.602, 15.828, 15.5075, 16.2155, 16.863, 17.130499999999998, 17.482999999999997, 17.7685, 18.2825, 18.559, 18.948, 18.532, 19.6785, 20.177999999999997, 20.594, 20.973, 21.253, 21.756, 22.066499999999998, 22.6755, 23.1205, 23.5955, 23.83, 24.293, 24.685000000000002, 25.192999999999998, 25.593, 26.1875, 26.6515, 27.158, 27.606, 27.9195, 28.633, 28.932, 29.536, 30.0775, 30.4745, 31.116, 31.6385, 32.075500000000005, 32.77, 33.213499999999996, 33.668, 34.157, 34.680499999999995, 35.2945, 35.536, 36.199, 33.3935, 37.576, 37.99, 38.4695, 39.2005, 40.0305, 40.4195, 37.8835, 41.869, 42.5245, 42.8655, 43.8225])
    #parOpt = np.array([0.4905, 0.489, 0.498, 0.494, 0.497, 0.51, 0.5355000000000001, 0.522, 0.672, 0.698, 0.6984999999999999, 0.6995, 0.7044999999999999, 0.666, 0.6795, 0.671, 0.7595000000000001, 0.8135, 0.8135, 0.7215, 0.7925, 0.75, 0.8, 0.76, 0.8015000000000001, 0.82, 0.7735000000000001, 0.893, 0.819, 0.8005, 0.8714999999999999, 0.7695000000000001, 3.099, 3.13, 3.3775, 3.2595, 3.4785000000000004, 3.5145, 3.636, 3.526, 3.659, 3.6985, 3.7835, 3.8125, 3.735, 3.908, 3.7835, 4.0675, 4.1899999999999995, 4.15, 4.2715, 4.149, 4.175, 4.338, 4.401999999999999, 4.423, 4.583500000000001, 4.747, 4.882, 4.8885, 4.95, 4.9815000000000005, 4.909, 5.129, 9.193000000000001, 9.3355, 9.347999999999999, 9.584, 9.8925, 9.803, 9.844999999999999, 10.3035, 10.254999999999999, 10.592, 10.650500000000001, 11.0595, 10.92, 10.963000000000001, 11.286, 11.543, 11.485, 11.461500000000001, 11.852, 11.951, 12.1755, 13.247, 12.468499999999999, 12.85, 12.7395, 13.364, 13.371500000000001, 13.3935, 13.71, 13.8825, 14.05, 14.047, 13.46, 12.7665, 12.864, 13.0345, 13.3945, 13.399000000000001, 13.651, 15.288499999999999, 15.5125, 15.5085, 13.9815, 14.353000000000002, 15.781, 15.508500000000002, 15.5795, 14.7105, 14.991, 15.475999999999999, 15.2015, 15.315000000000001, 15.6845, 15.595500000000001, 15.936499999999999, 15.9335, 16.366999999999997, 16.333, 16.4525, 16.719, 16.930500000000002, 16.8305, 17.0235, 17.156, 17.396, 17.3145, 17.545, 17.7705, 17.9345, 17.94, 18.312, 18.412, 18.497, 19.295499999999997, 19.0595, 20.723, 20.1295, 19.5205, 20.083, 20.0715, 20.116, 20.2215, 20.354, 20.406, 20.637, 20.7395, 21.5555, 21.437, 21.28, 21.766, 21.132, 24.7865, 28.163, 26.1405, 27.3235, 27.6295, 27.274, 26.89, 28.593, 27.522, 27.726, 26.6235, 28.491500000000002, 29.346, 27.7775, 29.393, 29.5465, 28.144, 29.97, 30.946, 30.572499999999998, 30.464, 29.541, 31.807000000000002, 29.7365, 28.1555, 30.8915, 36.4435, 34.783, 31.433500000000002, 29.322499999999998, 30.704, 29.319499999999998, 29.7045, 29.484499999999997, 30.5345, 33.364000000000004, 34.198, 33.6785, 30.954, 31.9985, 32.2975, 32.21, 32.971000000000004, 32.7565, 33.245999999999995])
    parOpt = np.array([2.2824999999999998, 2.13, 2.185, 2.5389999999999997, 2.4850000000000003, 2.255, 2.6165000000000003, 2.196, 1.5270000000000001, 1.839, 1.4955, 1.685, 1.3005, 1.564, 1.537, 2.1845, 1.8025, 1.596, 1.5935, 2.238, 2.5389999999999997, 2.0515, 2.178, 2.157, 1.8820000000000001, 1.5445, 1.5990000000000002, 1.3665, 1.545, 1.5645, 1.5715, 1.5805, 1.1179999999999999, 1.2555, 1.488, 1.445, 1.4685000000000001, 1.41, 1.8065, 1.279, 1.2645, 1.7755, 1.7485, 2.114, 1.7375, 1.3275000000000001, 1.6764999999999999, 1.714, 1.5665, 1.603, 1.456, 1.5, 1.6059999999999999, 1.4455, 1.333, 1.4224999999999999, 1.51, 1.662, 1.6825, 1.5675, 1.5025, 1.646, 1.2825, 1.805, 1.65, 1.6139999999999999, 1.4805000000000001, 1.5805, 1.482, 1.5665, 1.6480000000000001, 1.586, 1.794, 1.9855, 1.9455, 1.802, 1.607, 1.774, 1.501, 1.528, 1.75, 2.1955, 1.8820000000000001, 1.9885000000000002, 1.984, 2.6295, 2.0665, 2.089, 1.974, 1.8900000000000001, 1.9, 1.8925, 2.1425, 1.9895, 2.1765, 2.0655, 2.339, 2.3609999999999998, 2.041, 2.2355, 2.1955, 2.042, 2.349, 2.4565, 2.4175, 2.6719999999999997, 2.394, 2.3785, 2.537, 2.847, 2.5919999999999996, 2.3529999999999998, 2.7385, 2.6165000000000003, 2.692, 2.746, 2.704, 2.641, 2.947, 2.6609999999999996, 2.858, 2.8025, 3.08, 3.145, 3.177, 3.2560000000000002, 2.968, 3.4805, 3.3529999999999998, 3.306, 3.2605, 3.5265, 3.567, 3.586, 3.5525, 3.657, 3.95, 3.757, 3.8625, 4.4275, 4.0865, 4.0745000000000005, 3.939, 4.195, 4.255, 4.2735, 4.343, 4.5245, 4.223, 4.7225, 4.6355, 4.8565, 4.7915, 4.7305, 4.7205, 6.2935, 6.459, 6.568, 6.842499999999999, 6.948, 6.856, 7.0245, 7.3545, 7.0600000000000005, 7.024, 7.441000000000001, 7.318, 7.474, 7.5215, 7.569, 7.873, 8.039, 7.979, 8.5955, 7.928000000000001, 8.322, 8.033999999999999, 8.470500000000001, 7.6475, 6.9925, 8.124500000000001, 9.739, 9.3935, 7.8815, 7.5095, 7.892, 7.955, 7.917999999999999, 8.2125, 8.215, 9.2275, 9.496500000000001, 9.4485, 9.0015, 9.1835, 9.206, 9.8885, 9.3045, 9.433499999999999, 9.4195])


    _ = plt.xlabel('Graph size (nodes)')
    _ = plt.ylabel('Time (ms)')
    _ = plt.title('Parallel (1 thread) vs. Optimized Parallel (8 threads)')
    _ = plt.plot(x, parSeq, label="Parallel (1 thread)")
    _ = plt.plot(x, parOpt, label="Parallel Optimized (8 threads)")
    _ = plt.legend()
    plt.show()
    """

    # Plot graphs for 1-threaded big-graphs solutions
    xRange = [1] + list(range(5, 1005, 5))
    x = np.array(xRange)
    ySeq = np.array([])
    yPar1 = np.array([])

    _ = plt.xlabel('Graph size (nodes)')
    _ = plt.ylabel('Time (ms)')
    _ = plt.title('Sequential vs. Parallel (1 thread) algorithms')
    _ = plt.plot(x, ySeq, label="Sequential algorithm")
    _ = plt.plot(x, yPar1, label="Parallel algorithm (1 thread)")
    _ = plt.legend()
    plt.show()

    # Append the results of measurements
    yPars = []
    yPars.append(np.array([]))
    yPars.append(np.array([]))
    yPars.append(np.array([]))
    yPars.append(np.array([]))
    yPars.append(np.array([]))

    # Plot graphs for parallel speedups on big-graphs
    for idx in range(0, 5):
        _ = plt.xlabel('Graph size (nodes)')
        _ = plt.ylabel('Time (ms)')
        _ = plt.title('Parallelization speedup - {} threads'.format(idx))
        _ = plt.plot(x, ySeq, label="Sequential algorithm")
        _ = plt.plot(x, yPar1, label="Parallel algorithm (1 thread)")
        _ = plt.plot(x, yPars[idx], label="Parallel algorithm ({} threads)".format(idx))
        _ = plt.legend()
        plt.show()
